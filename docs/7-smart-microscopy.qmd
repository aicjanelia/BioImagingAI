---
author: 
  - name: Wesley Legant
    orcid: 0000-0003-1827-5371
    affiliations:
      - name: University of North Carolina at Chapel Hill
        state: NC
        country: USA
        postal-code: 27514
  - name: Suliana Manley
    orcid: 0000-0002-4755-4778
    affiliations:
      - name: École Polytechnique Fédérale de Lausanne
        country: Switzerland
subtitle: An Introduction to Smart Microscopy
---

# Adding AI to Your Hardware
<!--Your first header will be the chapter's upper-level table of contents title.-->
<!--If you'd like to have a subtitle, include it in the Quarto header above -->

* Introduction
  * Define and motivate the "problem" 
    * What is a Biological "Event"?
      * Why is it important to study these?
      * How is it distinct from an "Object"?

* Setting the bounds
  * What kinds of signals are we looking to extract events from?
  * What spatioetemporal scales are relevant?
  * What types of microscopes/imaging assays are in the scope of this chapter?
    * Limiting the scope

* Brief history/evolution of automated event/object detection in general
  * Offer some background to current methods
    * Including classical up to SVM
      * e.g micropilot and limitations
      * Case Study #1 : CellProfiler
      * Case Study #2 : Micropilot

* The need for new methods
  * Deep learning based and ML approaches
    * Where the algorithm learns what is important
    * What are the advantages of these methods?
      * What has been done recently in the literature?
    * What is required to label, train and implement these methods?
      * Special considerations for event detection modesl
        * Specifics of event detection in contast the other ML tasks

* Real-time vs a posteriori inference
  * Challenges, opportunities
  * Event detection as the first step in the microscopy workflow

* Limitations and ntoes of caution related to inference
  * "Trusting the algorithms"

* Conclusion

<!-- Under your first header, include a brief introduction to your chapter.

Starting prompt for this chapter: Chapter 7 motivates how AI can be used to control hardware. This chapter should focus on event-driven microscopy, but other smart microscopy topics can be included at the author's discretion.

Notes from the authors' meeting: This chapter does not have to be extensively technical or include code snippets to be useful to the audience. An overview of smart microscopy as a concept is useful. Even though there are limited instances of event-driven microscopy so far, discussing what those instances accomplished, and why an experiment may consider investing in their use, will benefit readers of this book.

## Include section headers as appropriate

Use markdown heading level two for section headers. You can use standard markdown formatting, for example _emphasize the end of this sentence_.

This is a new paragraph with more text. Your paragraphs can cross reference other items, such as @fig-simple. Use `fig` to reference figures, and `eq` to reference equations, such as @eq-stddev.

###  Sub-subsection headers are also available

To make your sections cross reference-able throughout the book, include a section reference, as shown in the header for @sec-equation.

## Bibliography and Citations

To cite a research article, add it to references.bib and then refer to the citation key. For example, reference @stringer2021 refers to CellPose and reference @von_chamier2021 refers to ZeroCostDL4Mic.

## Adding to the Glossary

We are using the extension [Quarto-glossary](https://debruine.github.io/quarto-glossary/#styles) to create a glossary for this book. To add a definition, edit the glossary.yml file. To reference the glossary, enclose the word as in these examples: LLMs suffer from {{< glossary hallucinations >}}. It is important to understand the underlying {{< glossary "training data" >}} to interpret your results. Clicking on the word will reveal its definition. The complete glossary for the book will be listed in the [Glossary](glossary.qmd).

## Code and Equations {#sec-equation}

This is an example of including a python snippet that generates a figure

```{python}
#| label: fig-simple
#| fig-cap: "Simple Plot"
import matplotlib.pyplot as plt
plt.plot([1,23,2,4])
plt.show()
```


In some cases, you may want to include a code-block that is not executed when the book is compiled. Use the `eval: false` option for this.

```{python}
#| eval: false
import matplotlib.pyplot as plt
plt.plot([1,23,2,4])
plt.show()
```


Figures can also be generated that do not show the code by using the option for `code-fold: true`.

```{python}
#| code-fold: true
#| label: fig-polar
#| fig-cap: "A spiral on a polar axis"
#| fig-alt: "A line plot on a polar axis. The line spirals out from a value of zero to a value of 2."

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

Here is an example equation.

$$
s = \sqrt{\frac{1}{N-1} \sum_{i=1}^N (x_i - \overline{x})^2}
$$ {#eq-stddev}

### Embedding Figures

You can also embed figures from other notebooks in the repo as shown in the following embed example.


{{< embed ../notebooks/test.ipynb#fig-test-fig echo-true >}}

When embedding notebooks, please store the .ipynb file in the notebook directory. Include the chapter in the name of your file. For example, `chapter4_example_u-net.ipynb`. This is how we will handle chapter- or example-specific environments. We will host notebooks on Google Colab so that any required packages for the code--but not for rendering the book at large--will be installed there. That way, we will not need to handle a global environment across the book.

## Quarto has additional features.

You can learn more about markdown options and additional Quarto features in the [Quarto documentation](https://quarto.org/docs/authoring/markdown-basics.html).  One example that you might find interesting is the option to include callouts in your text. These callouts can be used to highlight potential pitfalls or provide additional optional exercises that the reader might find helpful. Below are examples of the types of callouts available in Quarto.

::: {.callout-note}
Note that there are five types of callouts, including:
`note`, `tip`, `warning`, `caution`, and `important`. They can default to open (like this example) or collapsed (example below).
:::

::: {.callout-tip collapse="true"}
These could be good for extra material or exercises.
:::

::: {.callout-caution}
There are caveats when applying these tools. Expand the code below to learn more.

```{python}
#| code-fold: true
r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
```
:::

::: {.callout-warning}
Be careful to avoid hallucinations.
:::

::: {.callout-important}
This is key information.
::: -->